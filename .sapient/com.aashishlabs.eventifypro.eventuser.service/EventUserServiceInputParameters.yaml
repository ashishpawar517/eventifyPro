---
modelFingerprint: "69CE6D58EABA2C554A60EC51DD97789C"
targetClass:
  fullClassName: "com.aashishlabs.eventifypro.eventuser.service.EventUserService"
  annotations:
  - fullClassName: "org.springframework.stereotype.Service"
    values: {}
methods:
- method:
    name: "createEventUser"
    signature: "createEventUser(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)\
      \ : com.aashishlabs.eventifypro.eventuser.model.EventUserDTO"
    sourceCodeSignature: "EventUserDTO createEventUser(String username, String firstName,\
      \ String lastName, String emailAddress, String password)"
    returnType: "com.aashishlabs.eventifypro.eventuser.model.EventUserDTO"
    throwsExceptions:
    - "com.aashishlabs.eventifypro.eventuser.exception.EventUserException"
    parameters:
    - name: "username"
      value:
        sapientType: "BASIC"
        valueType: "java.lang.String"
    - name: "firstName"
      value:
        sapientType: "BASIC"
        valueType: "java.lang.String"
    - name: "lastName"
      value:
        sapientType: "BASIC"
        valueType: "java.lang.String"
    - name: "emailAddress"
      value:
        sapientType: "BASIC"
        valueType: "java.lang.String"
    - name: "password"
      value:
        sapientType: "BASIC"
        valueType: "java.lang.String"
    instructionFingerprint: "05003FB0A793B88CD9E4385AE35D42D2"
  paths:
  - pathId: "path1"
    testPathName: "createEventUserWhenEventUserRepositoryFindEventUserByUsernameUsernameIsPresentThrowsEventUserException"
    constructorSignature: "<init>(com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository)\
      \ : void"
    modelFingerprint: "1EF1C905B94E3F3411AACDFD2FD912F4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "1A2D9247F9911D532620787A50595435"
      valueUuid: "target"
    - type: "INPUT"
      name: "username"
      modelFingerprint: "D7FF79CC3200ECE8901D684C8FEABFF0"
      valueUuid: "username"
    - type: "INPUT"
      name: "firstName"
      modelFingerprint: "19BDB4D9C755D2DB64A44A38FE75EC3E"
      valueUuid: "firstName"
    - type: "INPUT"
      name: "lastName"
      modelFingerprint: "40F7CC1CCEBDA5E8F09CF3228CBA95B8"
      valueUuid: "lastName"
    - type: "INPUT"
      name: "emailAddress"
      modelFingerprint: "2C529F0E344CA7E7E13057A78F3308D0"
      valueUuid: "emailAddress"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "FIELD"
      name: "eventUserRepository"
      modelFingerprint: "7BFBD4735884E16D73B69EB0AB3F04EE"
      valueUuid: "repository"
      methodExercised:
        expression: "findEventUserByUsername(username:username):optional"
        signature: "findEventUserByUsername(String): Optional"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A3D0F47202C5328C5E960BD25EA011D3"
      valueUuid: "eventUserException"
    uuid: "c28caada-4bc6-3f84-9d59-f4959d055219"
    disabled: false
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.service.EventUserService"
        parameters:
        - name: "repository"
          value:
            sapientType: "MOCK"
            valueType: "com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository"
            uuid: "repository"
        privateConstructor: false
        createdByTargetCode: false
      valueType: "com.aashishlabs.eventifypro.eventuser.service.EventUserService"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username"
    - sapientType: "BASIC"
      content: !<regular>
        value: "firstName1"
      valueType: "java.lang.String"
      uuid: "firstName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "lastName1"
      valueType: "java.lang.String"
      uuid: "lastName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "emailAddress1"
      valueType: "java.lang.String"
      uuid: "emailAddress"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "MOCK"
      valueType: "com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository"
      uuid: "repository"
    - sapientType: "OPTIONAL"
      content: !<optional>
        value:
          sapientType: "MOCK"
          valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
          uuid: "optional-value"
        target: "java.util.Optional"
      valueType: "java.util.Optional"
      genericValueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
      uuid: "optional"
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.exception.EventUserException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Username already exists"
            valueType: "java.lang.String"
            fixed: true
        - name: "code"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "DUPLICATE_USERNAME"
            valueType: "com.aashishlabs.eventifypro.commons.enums.ErrorCode"
            uuid: "Enum-com.aashishlabs.eventifypro.commons.enums.ErrorCode-DUPLICATE_USERNAME"
            fixed: true
        privateConstructor: false
        createdByTargetCode: true
      valueType: "com.aashishlabs.eventifypro.eventuser.exception.EventUserException"
      uuid: "eventUserException"
      fixed: true
    branches:
    - lineNumber: 39
      expression: "eventUserRepository.findEventUserByUsername(username).isPresent()"
      range: "(39,9)-(39,73)"
      evaluatedAs: true
    calledSomeStaticInternalMethod: false
  - pathId: "path2"
    testPathName: "createEventUserWhenEventUserRepositoryFindEventUserByEmailAddressEmailAddressIsPresentThrowsEventUserException"
    constructorSignature: "<init>(com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository)\
      \ : void"
    modelFingerprint: "B4ADECC5C6E63027C30899BDFFC6BB41"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "1A2D9247F9911D532620787A50595435"
      valueUuid: "target"
    - type: "INPUT"
      name: "username"
      modelFingerprint: "D7FF79CC3200ECE8901D684C8FEABFF0"
      valueUuid: "username"
    - type: "INPUT"
      name: "firstName"
      modelFingerprint: "19BDB4D9C755D2DB64A44A38FE75EC3E"
      valueUuid: "firstName"
    - type: "INPUT"
      name: "lastName"
      modelFingerprint: "40F7CC1CCEBDA5E8F09CF3228CBA95B8"
      valueUuid: "lastName"
    - type: "INPUT"
      name: "emailAddress"
      modelFingerprint: "2C529F0E344CA7E7E13057A78F3308D0"
      valueUuid: "emailAddress"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "FIELD"
      name: "eventUserRepository"
      modelFingerprint: "5BEF3FE83552528F4CAB4984B58386DA"
      valueUuid: "repository"
      methodExercised:
        expression: "findEventUserByUsername(username:username):optional"
        signature: "findEventUserByUsername(String): Optional"
    - type: "FIELD"
      name: "eventUserRepository"
      modelFingerprint: "F5F4FBBE01C51358D8561B141A93C617"
      valueUuid: "repository"
      methodExercised:
        expression: "findEventUserByEmailAddress(emailAddress:emailAddress):optional2"
        signature: "findEventUserByEmailAddress(String): Optional"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B544EF9EB1CDEF942FC10FA4110F8350"
      valueUuid: "eventUserException"
    uuid: "07d69981-1ebe-39ec-a340-ddde9b28e528"
    disabled: false
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.service.EventUserService"
        parameters:
        - name: "repository"
          value:
            sapientType: "MOCK"
            valueType: "com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository"
            uuid: "repository"
        privateConstructor: false
        createdByTargetCode: false
      valueType: "com.aashishlabs.eventifypro.eventuser.service.EventUserService"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username"
    - sapientType: "BASIC"
      content: !<regular>
        value: "firstName1"
      valueType: "java.lang.String"
      uuid: "firstName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "lastName1"
      valueType: "java.lang.String"
      uuid: "lastName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "emailAddress1"
      valueType: "java.lang.String"
      uuid: "emailAddress"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "MOCK"
      valueType: "com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository"
      uuid: "repository"
    - sapientType: "OPTIONAL"
      content: !<optional>
        value:
          sapientType: "NULL"
          valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
        target: "java.util.Optional"
      valueType: "java.util.Optional"
      genericValueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
      uuid: "optional"
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username"
    - sapientType: "MOCK"
      valueType: "com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository"
      uuid: "repository"
    - sapientType: "OPTIONAL"
      content: !<optional>
        value:
          sapientType: "MOCK"
          valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
          uuid: "optional2-value"
        target: "java.util.Optional"
      valueType: "java.util.Optional"
      genericValueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
      uuid: "optional2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "emailAddress1"
      valueType: "java.lang.String"
      uuid: "emailAddress"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.exception.EventUserException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Email already exists"
            valueType: "java.lang.String"
            fixed: true
        - name: "code"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "DUPLICATE_EMAIL"
            valueType: "com.aashishlabs.eventifypro.commons.enums.ErrorCode"
            uuid: "Enum-com.aashishlabs.eventifypro.commons.enums.ErrorCode-DUPLICATE_EMAIL"
            fixed: true
        privateConstructor: false
        createdByTargetCode: true
      valueType: "com.aashishlabs.eventifypro.eventuser.exception.EventUserException"
      uuid: "eventUserException"
      fixed: true
    branches:
    - lineNumber: 39
      expression: "eventUserRepository.findEventUserByUsername(username).isPresent()"
      range: "(39,9)-(39,73)"
      evaluatedAs: false
    - lineNumber: 43
      expression: "eventUserRepository.findEventUserByEmailAddress(emailAddress).isPresent()"
      range: "(43,8)-(43,80)"
      evaluatedAs: true
    calledSomeStaticInternalMethod: false
  - pathId: "path3"
    testPathName: "createEventUserWhenEventUserRepositoryFindEventUserByEmailAddressEmailAddressNotIsPresent"
    constructorSignature: "<init>(com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository)\
      \ : void"
    modelFingerprint: "31D558BDD2CB7CAAB8268289DD900747"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "1A2D9247F9911D532620787A50595435"
      valueUuid: "target"
    - type: "INPUT"
      name: "username"
      modelFingerprint: "D7FF79CC3200ECE8901D684C8FEABFF0"
      valueUuid: "username"
    - type: "INPUT"
      name: "firstName"
      modelFingerprint: "19BDB4D9C755D2DB64A44A38FE75EC3E"
      valueUuid: "firstName"
    - type: "INPUT"
      name: "lastName"
      modelFingerprint: "40F7CC1CCEBDA5E8F09CF3228CBA95B8"
      valueUuid: "lastName"
    - type: "INPUT"
      name: "emailAddress"
      modelFingerprint: "2C529F0E344CA7E7E13057A78F3308D0"
      valueUuid: "emailAddress"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "FIELD"
      name: "eventUserRepository"
      modelFingerprint: "5BEF3FE83552528F4CAB4984B58386DA"
      valueUuid: "repository"
      methodExercised:
        expression: "findEventUserByUsername(username:username):optional"
        signature: "findEventUserByUsername(String): Optional"
    - type: "FIELD"
      name: "eventUserRepository"
      modelFingerprint: "04BDA9C40D4DE39F411667A152C25B0A"
      valueUuid: "repository"
      methodExercised:
        expression: "findEventUserByEmailAddress(emailAddress:emailAddress):optional2"
        signature: "findEventUserByEmailAddress(String): Optional"
    - type: "FIELD"
      name: "eventUserRepository"
      modelFingerprint: "12E6B2CE2D185BA8793447DEE1DA244A"
      valueUuid: "repository"
      methodExercised:
        expression: "save(entity:eventUser):object"
        signature: "save(EventUser): Object"
    - type: "LOCAL_VARIABLE"
      name: "createdUser"
      modelFingerprint: "186A766B6B4FCE545B554BA1D52D7A82"
      valueUuid: "object"
      methodExercised:
        expression: "getUsername():username2"
        signature: "getUsername(): String"
    - type: "FIELD"
      name: "eventUserDTOMapper"
      modelFingerprint: "F5D2464E10181E462DCAD62A34A8CCF2"
      valueUuid: "eventUserDTOMapper"
      methodExercised:
        expression: "apply(eventUser:object):eventUserDTO"
        signature: "apply(EventUser): EventUserDTO"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D02780D3ED2982F9862AD4D4B921D8A5"
      valueUuid: "eventUserDTO"
    uuid: "224f670d-10dd-3127-be0a-0a74e045399b"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return eventUserDTOMapper.apply(createdUser);"
      lineNumber: 51
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: eventUserDTOMapper - Method: apply"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.service.EventUserService"
        parameters:
        - name: "repository"
          value:
            sapientType: "MOCK"
            valueType: "com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository"
            uuid: "repository"
        privateConstructor: false
        createdByTargetCode: false
      valueType: "com.aashishlabs.eventifypro.eventuser.service.EventUserService"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username"
    - sapientType: "BASIC"
      content: !<regular>
        value: "firstName1"
      valueType: "java.lang.String"
      uuid: "firstName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "lastName1"
      valueType: "java.lang.String"
      uuid: "lastName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "emailAddress1"
      valueType: "java.lang.String"
      uuid: "emailAddress"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "MOCK"
      valueType: "com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository"
      uuid: "repository"
    - sapientType: "OPTIONAL"
      content: !<optional>
        value:
          sapientType: "NULL"
          valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
        target: "java.util.Optional"
      valueType: "java.util.Optional"
      genericValueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
      uuid: "optional"
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username"
    - sapientType: "MOCK"
      valueType: "com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository"
      uuid: "repository"
    - sapientType: "OPTIONAL"
      content: !<optional>
        value:
          sapientType: "NULL"
          valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
        target: "java.util.Optional"
      valueType: "java.util.Optional"
      genericValueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
      uuid: "optional2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "emailAddress1"
      valueType: "java.lang.String"
      uuid: "emailAddress"
    - sapientType: "MOCK"
      valueType: "com.aashishlabs.eventifypro.eventuser.repository.IEventUserRepository"
      uuid: "repository"
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
        propertiesMap:
          username:
            sapientType: "BASIC"
            content: !<regular>
              value: "username1"
            valueType: "java.lang.String"
            uuid: "username2"
      valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
        parameters:
        - name: "username"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "username1"
            valueType: "java.lang.String"
            uuid: "username"
        - name: "firstName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "firstName1"
            valueType: "java.lang.String"
            uuid: "firstName"
        - name: "lastName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "lastName1"
            valueType: "java.lang.String"
            uuid: "lastName"
        - name: "emailAddress"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "emailAddress1"
            valueType: "java.lang.String"
            uuid: "emailAddress"
        - name: "password"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "password1"
            valueType: "java.lang.String"
            uuid: "password"
        privateConstructor: false
        createdByTargetCode: true
      valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
      uuid: "eventUser"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
        propertiesMap:
          username:
            sapientType: "BASIC"
            content: !<regular>
              value: "username1"
            valueType: "java.lang.String"
            uuid: "username2"
      valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.mapper.EventUserDTOMapper"
        parameters: []
        privateConstructor: false
        createdByTargetCode: true
      valueType: "com.aashishlabs.eventifypro.eventuser.mapper.EventUserDTOMapper"
      uuid: "eventUserDTOMapper"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "com.aashishlabs.eventifypro.eventuser.model.EventUserDTO"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "com.aashishlabs.eventifypro.eventuser.mapper.EventUserDTOMapper"
            parameters: []
            privateConstructor: false
            createdByTargetCode: true
          valueType: "com.aashishlabs.eventifypro.eventuser.mapper.EventUserDTOMapper"
          uuid: "eventUserDTOMapper"
          fixed: true
        methodParameters:
        - name: "eventUser"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
              propertiesMap:
                username:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "username1"
                  valueType: "java.lang.String"
                  uuid: "username2"
            valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
            uuid: "object"
            explicitCastNeeded: true
        methodName: "apply"
      valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUserDTO"
      uuid: "eventUserDTO"
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
        propertiesMap:
          username:
            sapientType: "BASIC"
            content: !<regular>
              value: "username1"
            valueType: "java.lang.String"
            uuid: "username2"
      valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "com.aashishlabs.eventifypro.eventuser.model.EventUserDTO"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "com.aashishlabs.eventifypro.eventuser.mapper.EventUserDTOMapper"
            parameters: []
            privateConstructor: false
            createdByTargetCode: true
          valueType: "com.aashishlabs.eventifypro.eventuser.mapper.EventUserDTOMapper"
          uuid: "eventUserDTOMapper"
          fixed: true
        methodParameters:
        - name: "eventUser"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
              propertiesMap:
                username:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "username1"
                  valueType: "java.lang.String"
                  uuid: "username2"
            valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUser"
            uuid: "object"
            explicitCastNeeded: true
        methodName: "apply"
      valueType: "com.aashishlabs.eventifypro.eventuser.model.EventUserDTO"
      uuid: "eventUserDTO"
    branches:
    - lineNumber: 39
      expression: "eventUserRepository.findEventUserByUsername(username).isPresent()"
      range: "(39,9)-(39,73)"
      evaluatedAs: false
    - lineNumber: 43
      expression: "eventUserRepository.findEventUserByEmailAddress(emailAddress).isPresent()"
      range: "(43,8)-(43,80)"
      evaluatedAs: false
    calledSomeStaticInternalMethod: false
